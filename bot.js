const { Telegraf, Markup } = require('telegraf');
const sqlite3 = require('sqlite3').verbose();
require('dotenv').config();

const bot = new Telegraf(process.env.BOT_TOKEN);

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
const db = new sqlite3.Database('./user_data.db');

db.serialize(() => {
  db.run(`CREATE TABLE IF NOT EXISTS user_data (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    userId TEXT,
    orderNumber TEXT,
    photos TEXT,
    comments TEXT,
    timestamp TEXT
  )`);
});

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = {};

// –®–∞–≥–∏
const steps = {
  ORDER_NUMBER: 'ORDER_NUMBER',
  ORDER_PHOTOS: 'ORDER_PHOTOS',
  COMMENTS: 'COMMENTS',
  WAITING_FOR_COMMENT: 'WAITING_FOR_COMMENT',
  WAITING_FOR_MORE_PHOTOS: 'WAITING_FOR_MORE_PHOTOS'
};

bot.start((ctx) => {
  ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞!');
  userStates[ctx.chat.id] = { step: steps.ORDER_NUMBER };
});

bot.help((ctx) => ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Ç–∏–∫–µ—Ä'));

bot.on('sticker', (ctx) => ctx.reply('üëç'));

bot.hears('–ø—Ä–∏–≤–µ—Ç', (ctx) => ctx.reply('–ü—Ä–∏–≤–µ—Ç!'));

bot.command('restart', (ctx) => {
  ctx.reply('–ü—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞!');
  userStates[ctx.chat.id] = { step: steps.ORDER_NUMBER };
});

bot.on('text', (ctx) => {
  const userId = ctx.chat.id;
  const userState = userStates[userId];

  if (userState) {
    if (userState.step === steps.ORDER_NUMBER) {
      const orderNumber = ctx.message.text;
      userState.orderNumber = orderNumber;
      userState.step = steps.WAITING_FOR_MORE_PHOTOS;
      ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —É—á–µ—Ç–∞ –±—Ä–∞–∫–∞');
    } else if (userState.step === steps.WAITING_FOR_COMMENT) {
      userState.comments = ctx.message.text;
      ctx.reply('–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –°–ø–∞—Å–∏–±–æ! –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.', Markup.inlineKeyboard([
        Markup.button.callback('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π –∑–∞–∫–∞–∑', 'NEW_ORDER'),
        Markup.button.callback('–ó–∞–≤–µ—Ä—à–∏—Ç—å', 'FINISH_BOT')
      ]).resize());
      saveUserData(userId, userState);
      delete userStates[userId];
    }
  }
});

bot.on('photo', (ctx) => {
  const userId = ctx.chat.id;
  const userState = userStates[userId];

  if (userState && (userState.step === steps.WAITING_FOR_MORE_PHOTOS || userState.step === steps.ORDER_PHOTOS)) {
    const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
    if (!userState.photos) {
      userState.photos = [];
    }
    userState.photos.push(photoId);

    if (userState.step === steps.WAITING_FOR_MORE_PHOTOS) {
      ctx.reply('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.', Markup.inlineKeyboard([
        Markup.button.callback('–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', 'LEAVE_COMMENT'),
        Markup.button.callback('–ó–∞–≤–µ—Ä—à–∏—Ç—å', 'FINISH')
      ]).resize());
      userState.step = steps.ORDER_PHOTOS;
    }
  } else {
    ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.');
  }
});

bot.action('LEAVE_COMMENT', (ctx) => {
  const userId = ctx.chat.id;
  const userState = userStates[userId];

  if (userState && userState.step === steps.ORDER_PHOTOS) {
    ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:');
    userState.step = steps.WAITING_FOR_COMMENT;
  }
});

bot.action('FINISH', (ctx) => {
  const userId = ctx.chat.id;
  const userState = userStates[userId];

  if (userState && userState.step === steps.ORDER_PHOTOS) {
    ctx.reply('–°–ø–∞—Å–∏–±–æ! –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω.', Markup.inlineKeyboard([
      Markup.button.callback('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π –∑–∞–∫–∞–∑', 'NEW_ORDER'),
      Markup.button.callback('–ó–∞–≤–µ—Ä—à–∏—Ç—å', 'FINISH_BOT')
    ]).resize());
    saveUserData(userId, userState);
    delete userStates[userId];
  }
});

bot.action('NEW_ORDER', (ctx) => {
  ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞!');
  userStates[ctx.chat.id] = { step: steps.ORDER_NUMBER };
});

bot.action('FINISH_BOT', (ctx) => {
  ctx.reply('–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Å–≤–æ—é —Ä–∞–±–æ—Ç—É. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
  delete userStates[ctx.chat.id];
});

bot.launch().then(() => {
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
}).catch(err => {
  console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞:', err);
});

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function saveUserData(userId, userState) {
  const photos = userState.photos ? userState.photos.join(',') : '';
  const timestamp = new Date().toISOString();

  db.run(`INSERT INTO user_data (userId, orderNumber, photos, comments, timestamp) VALUES (?, ?, ?, ?, ?)`,
    [userId, userState.orderNumber, photos, userState.comments, timestamp], (err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
      } else {
        console.log(`–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.`);
      }
    });
}
